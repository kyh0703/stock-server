package main

import (
	"context"
	"log"
	"net/http"
	"os/signal"
	"syscall"
	"time"

	"github.com/kyh0703/stock-server/configs"
	"github.com/kyh0703/stock-server/internal/database"
	"github.com/kyh0703/stock-server/internal/routes"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/kyh0703/stock-server/docs"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server client server

// @contact.name API support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8000
// @BasePath /api/v1
func main() {
	// Create context that listens for the interrupt signal from the OS
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	// init ent client
	ec, err := database.ConnectDatabase(
		ctx,
		configs.Env.DBType,
		configs.Env.DBUrl,
	)
	if err != nil {
		log.Fatalf("failed connection database: %v", err)
	}
	defer ec.Close()

	// init redis client
	rc, err := database.ConnectRedis(configs.Env.CacheUrl)
	if err != nil {
		log.Fatalf("failed connection redis: %v", err)
	}
	defer rc.Close()

	// create fiber app
	app := routes.SetupApp()

	// initializing the server in goroutine so that
	// it won't block the graceful shutdown handling below
	go func() {
		err := app.Listen(":" + configs.Env.Port)
		if err != nil && err != http.ErrServerClosed {
			log.Fatalf("listen: %s\n", err)
		}
	}()
	log.Println("listen server start")

	// Listen for the interrupt signal.
	<-ctx.Done()

	// Restore default behavior on the interrupt signal notify user of shutdown.
	stop()

	// The context is used to inform the server it has 5 seconds to finish
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := app.Shutdown(); err != nil {
		log.Fatal("Server forced to shutdown: ", err)
	}

	log.Println("exit server")
}
