// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kyh0703/stock-server/ent/posts"
	"github.com/kyh0703/stock-server/ent/users"
)

// Posts is the model entity for the Posts schema.
type Posts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// PublishAt holds the value of the "publishAt" field.
	PublishAt time.Time `json:"publishAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostsQuery when eager-loading is set.
	Edges       PostsEdges `json:"edges"`
	users_posts *int
}

// PostsEdges holds the relations/edges for other nodes in the graph.
type PostsEdges struct {
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostsEdges) UserOrErr() (*Users, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: users.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Posts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posts.FieldTags:
			values[i] = new([]byte)
		case posts.FieldID:
			values[i] = new(sql.NullInt64)
		case posts.FieldTitle, posts.FieldBody:
			values[i] = new(sql.NullString)
		case posts.FieldPublishAt:
			values[i] = new(sql.NullTime)
		case posts.ForeignKeys[0]: // users_posts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Posts", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Posts fields.
func (po *Posts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case posts.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case posts.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				po.Body = value.String
			}
		case posts.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case posts.FieldPublishAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publishAt", values[i])
			} else if value.Valid {
				po.PublishAt = value.Time
			}
		case posts.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_posts", value)
			} else if value.Valid {
				po.users_posts = new(int)
				*po.users_posts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Posts entity.
func (po *Posts) QueryUser() *UsersQuery {
	return (&PostsClient{config: po.config}).QueryUser(po)
}

// Update returns a builder for updating this Posts.
// Note that you need to call Posts.Unwrap() before calling this method if this Posts
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Posts) Update() *PostsUpdateOne {
	return (&PostsClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Posts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Posts) Unwrap() *Posts {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Posts is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Posts) String() string {
	var builder strings.Builder
	builder.WriteString("Posts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(po.Body)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", po.Tags))
	builder.WriteString(", ")
	builder.WriteString("publishAt=")
	builder.WriteString(po.PublishAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PostsSlice is a parsable slice of Posts.
type PostsSlice []*Posts

func (po PostsSlice) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
